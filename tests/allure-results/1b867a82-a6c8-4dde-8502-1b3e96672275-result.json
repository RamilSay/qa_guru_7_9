{"name": "test_github", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nCurrent browser version is 117.0.5938.150 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00F14DE3+43907]\n\t(No symbol) [0x00EA0741]\n\t(No symbol) [0x00D933ED]\n\t(No symbol) [0x00DBBE61]\n\t(No symbol) [0x00DBB5B4]\n\t(No symbol) [0x00DB71F2]\n\t(No symbol) [0x00DB5190]\n\t(No symbol) [0x00DE9396]\n\t(No symbol) [0x00DE8F2C]\n\t(No symbol) [0x00DE2956]\n\t(No symbol) [0x00DBE17E]\n\t(No symbol) [0x00DBF32D]\n\tGetHandleVerifier [0x011C5AF9+2865305]\n\tGetHandleVerifier [0x0120E78B+3163435]\n\tGetHandleVerifier [0x01208441+3138017]\n\tGetHandleVerifier [0x00F9E0F0+605840]\n\t(No symbol) [0x00EAA64C]\n\t(No symbol) [0x00EA6638]\n\t(No symbol) [0x00EA675F]\n\t(No symbol) [0x00E98DB7]\n\tBaseThreadInitThunk [0x76F8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77197B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77197AEE+238]", "trace": "def test_github():\n>       browser.open(\"https://github.com\")\n\ntest_selene.py:5: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:216: in get\n    driver = config.driver\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:93: in install_and_build_chrome\n    return Chrome(\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000202FFCF2450>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77197B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77197AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nE       Current browser version is 117.0.5938.150 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F14DE3+43907]\nE       \t(No symbol) [0x00EA0741]\nE       \t(No symbol) [0x00D933ED]\nE       \t(No symbol) [0x00DBBE61]\nE       \t(No symbol) [0x00DBB5B4]\nE       \t(No symbol) [0x00DB71F2]\nE       \t(No symbol) [0x00DB5190]\nE       \t(No symbol) [0x00DE9396]\nE       \t(No symbol) [0x00DE8F2C]\nE       \t(No symbol) [0x00DE2956]\nE       \t(No symbol) [0x00DBE17E]\nE       \t(No symbol) [0x00DBF32D]\nE       \tGetHandleVerifier [0x011C5AF9+2865305]\nE       \tGetHandleVerifier [0x0120E78B+3163435]\nE       \tGetHandleVerifier [0x01208441+3138017]\nE       \tGetHandleVerifier [0x00F9E0F0+605840]\nE       \t(No symbol) [0x00EAA64C]\nE       \t(No symbol) [0x00EA6638]\nE       \t(No symbol) [0x00EA675F]\nE       \t(No symbol) [0x00E98DB7]\nE       \tBaseThreadInitThunk [0x76F8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77197B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77197AEE+238]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "stderr", "source": "dc6f9f5a-9cc6-4fe5-b3f1-81e15009a717-attachment.txt", "type": "text/plain"}], "start": 1697033228636, "stop": 1697033234482, "uuid": "80f5bd55-1633-42f6-9885-b2a32dedc107", "historyId": "89035ed2e74645e3e94ab470be5e353e", "testCaseId": "89035ed2e74645e3e94ab470be5e353e", "fullName": "test_selene#test_github", "labels": [{"name": "suite", "value": "test_selene"}, {"name": "host", "value": "Ram_Say"}, {"name": "thread", "value": "13660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_selene"}]}